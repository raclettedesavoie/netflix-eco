// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace netflix_eco_back.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250520203338_AddNextEpisodeToAirToSeries")]
    partial class AddNextEpisodeToAirToSeries
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SerieBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiRef")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "apiRef");

                    b.Property<DateTime>("FirstAirDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "first_air_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "original_language");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PosterPath")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "poster_path");

                    b.Property<int>("SerieId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("SerieBase", b =>
                {
                    b.OwnsOne("NextEpisode", "NextEpisodeToAir", b1 =>
                        {
                            b1.Property<int>("SerieBaseId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("AirDate")
                                .HasColumnType("datetime2")
                                .HasAnnotation("Relational:JsonPropertyName", "air_date");

                            b1.Property<int>("EpisodeNumber")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "episode_number");

                            b1.Property<int>("NextEpisodeId")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "next_episode_id");

                            b1.Property<int>("SeasonNumber")
                                .HasColumnType("int")
                                .HasAnnotation("Relational:JsonPropertyName", "season_number");

                            b1.HasKey("SerieBaseId");

                            b1.ToTable("Series");

                            b1.HasAnnotation("Relational:JsonPropertyName", "next_episode_to_air");

                            b1.WithOwner()
                                .HasForeignKey("SerieBaseId");
                        });

                    b.Navigation("NextEpisodeToAir");
                });
#pragma warning restore 612, 618
        }
    }
}
